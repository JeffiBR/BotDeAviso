"""
Script para inicializar templates de mensagem padr√£o
"""
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from src.models.user import db
from src.models.template_mensagem import TemplateMensagem
from src.main import app
import json

def criar_templates_padrao():
    """Cria templates de mensagem padr√£o para o sistema"""
    
    templates_padrao = [
        # Templates para IPTV
        {
            'nome': 'Vencimento IPTV - 7 dias',
            'tipo_produto': 'IPTV',
            'tipo_template': 'vencimento',
            'conteudo': '''Ol√° {nome}! üì∫

Seu plano {plano} vence em {dias} dias.

üí∞ Valor: {valor}
üìÖ Para manter seu acesso sem interrup√ß√µes, renove antes do vencimento.

Entre em contato para renovar! üëç''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias']),
            'padrao': True
        },
        {
            'nome': 'Vencimento IPTV - Hoje',
            'tipo_produto': 'IPTV',
            'tipo_template': 'vencimento',
            'conteudo': '''üö® ATEN√á√ÉO {nome}!

Seu plano {plano} vence HOJE!

üí∞ Valor: {valor}
‚ö†Ô∏è Renove agora para n√£o perder o acesso aos canais.

Entre em contato urgente! üìû''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias'])
        },
        {
            'nome': 'Renova√ß√£o IPTV Confirmada',
            'tipo_produto': 'IPTV',
            'tipo_template': 'renovacao',
            'conteudo': '''‚úÖ Renova√ß√£o Confirmada!

Ol√° {nome}, sua renova√ß√£o foi processada com sucesso!

üì∫ Plano: {plano}
üí∞ Valor pago: {valor}
üìÖ V√°lido por mais {dias} dias

Obrigado pela confian√ßa! üôè''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias'])
        },
        
        # Templates para VPN
        {
            'nome': 'Vencimento VPN - 7 dias',
            'tipo_produto': 'VPN',
            'tipo_template': 'vencimento',
            'conteudo': '''Ol√° {nome}! üîí

Seu plano {plano} vence em {dias} dias.

üí∞ Valor: {valor}
üõ°Ô∏è Para manter sua navega√ß√£o segura, renove antes do vencimento.

Entre em contato para renovar! üëç''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias']),
            'padrao': True
        },
        {
            'nome': 'Vencimento VPN - Hoje',
            'tipo_produto': 'VPN',
            'tipo_template': 'vencimento',
            'conteudo': '''üö® ATEN√á√ÉO {nome}!

Seu plano {plano} vence HOJE!

üí∞ Valor: {valor}
‚ö†Ô∏è Renove agora para manter sua prote√ß√£o online.

Entre em contato urgente! üìû''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias'])
        },
        {
            'nome': 'Renova√ß√£o VPN Confirmada',
            'tipo_produto': 'VPN',
            'tipo_template': 'renovacao',
            'conteudo': '''‚úÖ Renova√ß√£o Confirmada!

Ol√° {nome}, sua renova√ß√£o foi processada com sucesso!

üîí Plano: {plano}
üí∞ Valor pago: {valor}
üìÖ V√°lido por mais {dias} dias

Sua seguran√ßa est√° garantida! üõ°Ô∏è''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias'])
        },
        
        # Templates para OUTROS
        {
            'nome': 'Vencimento Geral - 7 dias',
            'tipo_produto': 'OUTROS',
            'tipo_template': 'vencimento',
            'conteudo': '''Ol√° {nome}! 

Seu plano {plano} vence em {dias} dias.

üí∞ Valor: {valor}
üìÖ Para manter seu acesso, renove antes do vencimento.

Entre em contato para renovar! üëç''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias']),
            'padrao': True
        },
        
        # Templates gerais
        {
            'nome': 'Mensagem Personalizada Geral',
            'tipo_produto': 'GERAL',
            'tipo_template': 'personalizada',
            'conteudo': '''Ol√° {nome}!

Esta √© uma mensagem personalizada sobre seu plano {plano}.

üí∞ Valor: {valor}

Entre em contato para mais informa√ß√µes! üìû''',
            'variaveis_disponiveis': json.dumps(['nome', 'plano', 'valor', 'dias']),
            'padrao': True
        }
    ]
    
    with app.app_context():
        # Verificar se j√° existem templates
        if TemplateMensagem.query.count() > 0:
            print("Templates j√° existem no banco de dados.")
            return
        
        templates_criados = 0
        
        for template_data in templates_padrao:
            template = TemplateMensagem(
                nome=template_data['nome'],
                tipo_produto=template_data['tipo_produto'],
                tipo_template=template_data['tipo_template'],
                conteudo=template_data['conteudo'],
                variaveis_disponiveis=template_data['variaveis_disponiveis'],
                padrao=template_data.get('padrao', False),
                ativo=True
            )
            
            db.session.add(template)
            templates_criados += 1
        
        try:
            db.session.commit()
            print(f"{templates_criados} templates padr√£o criados com sucesso!")
        except Exception as e:
            print(f"Erro ao criar templates: {e}")
            db.session.rollback()

if __name__ == '__main__':
    criar_templates_padrao()

